@using YourTurn.Web.Services
@model YourTurn.Web.Models.Lobby

@{
    ViewData["Title"] = "Oyun - " + Model.LobbyCode;
    var currentPlayerName = ViewBag.CurrentPlayerName?.ToString();
    var gameState = Model.GameState;
    var isMyTurn = gameState?.CurrentTurn == currentPlayerName;
    var isActivePlayer = currentPlayerName == gameState?.ActivePlayer1 || currentPlayerName == gameState?.ActivePlayer2;
    var currentPlayer = Model.Players.FirstOrDefault(p => p.Name == currentPlayerName);
    var currentPlayerTeam = currentPlayer?.Team ?? "";
}

<div class="container-fluid mt-3">
    <!-- Round Ba≈ülangƒ±√ß Mesajƒ± -->
    @if (TempData["RoundStartMessage"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            <i class="fas fa-dice"></i> <strong>@TempData["RoundStartMessage"]</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- √úst Bilgi Paneli -->
    <div class="row">
        <div class="col-12">
            <div class="card bg-dark text-white mb-3">
                <div class="card-body text-center">
                    <h4>@Model.Category - Lobby: <span id="lobbyCode" class="text-warning" style="cursor: pointer; user-select: all;" onclick="copyLobbyCode()" title="Kopyalamak i√ßin tƒ±klayƒ±n">@Model.LobbyCode</span></h4>
                    <div class="row">
                        <div class="col-4 text-start">
                            <h5 class="text-danger">üî¥ Sol Takƒ±m: <span id="team1Score">@gameState?.Team1Score</span></h5>
                            <div id="team1Active">
                                @if (gameState?.IsWaitingForVolunteers == true)
                                {
                                    if (string.IsNullOrEmpty(gameState.Team1Volunteer))
                                    {
                                        <small>G√∂n√ºll√º bekleniyor...</small>
                                    }
                                    else
                                    {
                                        <small>Aktif: @gameState.Team1Volunteer</small>
                                    }
                                }
                                else
                                {
                                    <small>Aktif: @gameState?.ActivePlayer1</small>
                                }
                            </div>
                        </div>
                        <div class="col-4 text-center">
                            <div id="gameStatus">
                                @if (gameState?.IsWaitingForVolunteers == true)
                                {
                                    <span class="badge bg-info fs-6">G√∂n√ºll√º Bekleniyor</span>
                                }
                                else if (gameState?.IsGameActive == true)
                                {
                                    <span class="badge bg-success fs-6">Oyun Devam Ediyor</span>
                                }
                                else if (!string.IsNullOrEmpty(gameState?.Winner))
                                {
                                    <span class="badge bg-warning fs-6">
                                        @(gameState.Winner == "Sol" ? "üî¥ Sol Takƒ±m" : "üîµ Saƒü Takƒ±m") Kazandƒ±!
                                    </span>
                                }
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <h5 class="text-primary">üîµ Saƒü Takƒ±m: <span id="team2Score">@gameState?.Team2Score</span></h5>
                            <div id="team2Active">
                                @if (gameState?.IsWaitingForVolunteers == true)
                                {
                                    if (string.IsNullOrEmpty(gameState.Team2Volunteer))
                                    {
                                        <small>G√∂n√ºll√º bekleniyor...</small>
                                    }
                                    else
                                    {
                                        <small>Aktif: @gameState.Team2Volunteer</small>
                                    }
                                }
                                else
                                {
                                    <small>Aktif: @gameState?.ActivePlayer2</small>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- G√∂n√ºll√º Butonlarƒ± -->
    @if (gameState?.IsWaitingForVolunteers == true)
    {
        <div class="row mb-4">
            <div class="col-6 text-center">
                @if (currentPlayerTeam == "Sol" && string.IsNullOrEmpty(gameState.Team1Volunteer))
                {
                    <button class="btn btn-danger btn-lg" onclick="volunteerForTeam('Sol')">
                        <i class="fas fa-hand-paper"></i> G√∂n√ºll√º Ol
                    </button>
                }
            </div>
            <div class="col-6 text-center">
                @if (currentPlayerTeam == "Saƒü" && string.IsNullOrEmpty(gameState.Team2Volunteer))
                {
                    <button class="btn btn-primary btn-lg" onclick="volunteerForTeam('Saƒü')">
                        <i class="fas fa-hand-paper"></i> G√∂n√ºll√º Ol
                    </button>
                }
            </div>
        </div>
    }

    <!-- S√ºre √áubuƒüu (Yeni Tasarƒ±m) -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header text-center">
                    <h5>‚è±Ô∏è S√ºre √áubuƒüu</h5>
                    <small class="text-muted">Sol takƒ±m solda patlayacak, saƒü takƒ±m saƒüda patlayacak!</small>
                </div>
                <div class="card-body">
                    <div class="position-relative" style="height: 80px;">
                        <!-- Ana √ßubuk -->
                        <div class="bg-dark" style="height: 20px; width: 100%; position: absolute; top: 30px; border-radius: 10px; border: 2px solid #fff;"></div>
                        
                        <!-- Sol patlama b√∂lgesi -->
                        <div class="bg-danger" style="height: 20px; width: 10%; position: absolute; top: 30px; left: 0; border-radius: 10px 0 0 10px;"></div>
                        
                        <!-- Saƒü patlama b√∂lgesi -->
                        <div class="bg-primary" style="height: 20px; width: 10%; position: absolute; top: 30px; right: 0; border-radius: 0 10px 10px 0;"></div>
                        
                        <!-- Orta nokta -->
                        <div class="position-absolute" style="left: 50%; top: 25px; transform: translateX(-50%); width: 2px; height: 30px; background: #fff;"></div>
                        <div class="position-absolute" style="left: 50%; top: 55px; transform: translateX(-50%); font-size: 10px; color: #666;">0</div>
                        
                        <!-- Sol ve saƒü u√ß i≈üaretleri -->
                        <div class="position-absolute" style="left: 0; top: 55px; font-size: 10px; color: #666;">-100</div>
                        <div class="position-absolute" style="right: 0; top: 55px; font-size: 10px; color: #666;">+100</div>
                        
                        <!-- Hareket eden nokta -->
                        <div id="movingPoint" class="position-absolute" style="top: 20px; transform: translateX(-50%); font-size: 25px; transition: left 0.1s ease;">
                            ‚ö°
                        </div>
                    </div>
                    
                    <!-- Pozisyon bilgisi -->
                    <div class="text-center mt-3">
                        <div class="row">
                            <div class="col-6 text-danger">
                                <small>Sol Takƒ±m B√∂lgesi</small>
                            </div>
                            <div class="col-6 text-primary">
                                <small>Saƒü Takƒ±m B√∂lgesi</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Soru B√∂l√ºm√º -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header text-center">
                    <h5>Soru</h5>
                </div>
                <div class="card-body text-center">
                    <h4 class="text-primary">@(gameState?.CurrentQuestion ?? "Oyun hen√ºz ba≈ülamadƒ±")</h4>
                    
                    <div id="turnInfo">
                        @if (gameState?.IsGameActive == true)
                        {
                            <div class="mt-3">
                                <p class="text-muted">
                                    Sƒ±ra: <strong class="@(gameState.CurrentTurn == gameState.ActivePlayer1 ? "text-danger" : "text-primary")">
                                        @gameState.CurrentTurn
                                    </strong>
                                    <br>
                                    <small class="@(gameState.CurrentTurn == gameState.ActivePlayer1 ? "text-danger" : "text-primary")">
                                        (@(gameState.CurrentTurn == gameState.ActivePlayer1 ? "üî¥ Sol" : "üîµ Saƒü") Takƒ±mƒ±)
                                    </small>
                                </p>
                                <div id="timerStatus" class="mt-2">
                                    @if (gameState.IsTimerRunning)
                                    {
                                        <span class="badge bg-warning">‚è∞ S√ºre ƒ∞≈üliyor!</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">‚è∏Ô∏è S√ºre Durdu</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Kontrol Butonlarƒ± -->
    <div id="gameControls">
        @if (gameState?.IsGameActive == true && isActivePlayer)
        {
            <div class="row mb-4">
                <div class="col-12 text-center">
                    <button id="passTurnBtn" class="btn btn-lg @(isMyTurn ? "btn-success" : "btn-secondary")" 
                            onclick="passTurn()" 
                            @(isMyTurn ? "" : "disabled")>
                        <i class="fas @(isMyTurn ? "fa-arrow-right" : "fa-clock")"></i> 
                        @(isMyTurn ? "Sƒ±rayƒ± Ge√ß ve S√ºreyi Ba≈ülat!" : "Sƒ±ra Rakipte")
                    </button>
                    @if (isMyTurn)
                    {
                        <div class="mt-2">
                            <small class="text-warning">‚ö†Ô∏è Butona tƒ±kladƒ±ƒüƒ±n anda s√ºre kar≈üƒ± tarafa doƒüru hareket etmeye ba≈ülayacak!</small>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <!-- Oyun Sonu -->
    <div id="gameEndControls">
        @if (gameState?.IsGameActive == false && !string.IsNullOrEmpty(gameState.Winner))
        {
            <div class="row mb-4">
                <div class="col-12 text-center">
                    @{
                        var isGameCompleted = GameService.HasWinningTeam(gameState.Team1Score, gameState.Team2Score);
                        var gameWinner = GameService.GetWinningTeam(gameState.Team1Score, gameState.Team2Score);
                    }
                    
                    @if (isGameCompleted)
                    {
                        <div class="alert alert-success">
                            <h4>üèÜ Oyun Bitti!</h4>
                            <p><strong>@(gameWinner == "Sol" ? "üî¥ Sol Takƒ±m" : "üîµ Saƒü Takƒ±m")</strong> oyunu kazandƒ±!</p>
                            <p class="mb-0">Final Skor: <strong>üî¥ Sol: @gameState.Team1Score - üîµ Saƒü: @gameState.Team2Score</strong></p>
                        </div>
                        
                        @if (Model.HostPlayerName == currentPlayerName)
                        {
                            <form method="post" action="/Game/StartNewRound" style="display: inline;">
                                <input type="hidden" name="code" value="@Model.LobbyCode" />
                                <button type="submit" class="btn btn-success btn-lg">
                                    <i class="fas fa-home"></i> Lobeye D√∂n
                                </button>
                            </form>
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <h4>üéâ Round Bitti!</h4>
                            <p><strong>@(gameState.Winner == "Sol" ? "üî¥ Sol Takƒ±m" : "üîµ Saƒü Takƒ±m")</strong> bu round'u kazandƒ±!</p>
                            <p class="mb-0">Mevcut Skor: <strong>üî¥ Sol: @gameState.Team1Score - üîµ Saƒü: @gameState.Team2Score</strong></p>
                        </div>
                        
                        @if (Model.HostPlayerName == currentPlayerName)
                        {
                            <!-- Kategori Se√ßim B√∂l√ºm√º -->
                            <div class="card mt-3">
                                <div class="card-header bg-info text-white">
                                    <h6><i class="fas fa-tags"></i> Kategori Se√ßimi (ƒ∞steƒüe Baƒülƒ±)</h6>
                                </div>
                                <div class="card-body">
                                    <p class="text-muted mb-3">
                                        <i class="fas fa-info-circle"></i> 
                                        Yeni round ba≈ülamadan √∂nce kategori deƒüi≈ütirebilirsiniz. 
                                        Bo≈ü bƒ±rakƒ±rsanƒ±z mevcut kategori korunur.
                                    </p>
                                    <form method="post" action="/Game/ChangeCategory" class="row g-3">
                                        <input type="hidden" name="code" value="@Model.LobbyCode" />
                                        <div class="col-md-8">
                                            <select class="form-select" name="category">
                                                <option value="">Mevcut Kategoriyi Koru (@Model.Category)</option>
                                                <option value="Genel K√ºlt√ºr">üéì Genel K√ºlt√ºr</option>
                                                <option value="Spor">‚öΩ Spor</option>
                                                <option value="Tarih">üìö Tarih</option>
                                                <option value="Bilim">üî¨ Bilim</option>
                                                <option value="Sanat">üé® Sanat</option>
                                                <option value="Coƒürafya">üåç Coƒürafya</option>
                                                <option value="Eƒülence">üéÆ Eƒülence</option>
                                                <option value="Teknoloji">üíª Teknoloji</option>
                                            </select>
                                        </div>
                                        <div class="col-md-4">
                                            <button type="submit" class="btn btn-outline-info">
                                                <i class="fas fa-sync"></i> Kategori Deƒüi≈ütir
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                            
                            <!-- Yeni Round Ba≈ülat Butonu -->
                            <div class="mt-3">
                                <form method="post" action="/Game/StartNewRound" style="display: inline;">
                                    <input type="hidden" name="code" value="@Model.LobbyCode" />
                                    <button type="submit" class="btn btn-primary btn-lg">
                                        <i class="fas fa-redo"></i> Yeni Round Ba≈ülat
                                    </button>
                                </form>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>

    <!-- Oyuncu Listesi -->
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-danger text-white">
                    <h6 class="mb-0">üî¥ Sol Takƒ±m</h6>
                </div>
                <div class="card-body">
                    @foreach (var player in Model.Players.Where(p => p.Team == "Sol"))
                    {
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>@player.Name</span>
                            <div>
                                @if (player.Name == gameState?.ActivePlayer1)
                                {
                                    <span class="badge bg-success">AKTIF</span>
                                }
                                @if (player.Name == currentPlayerName)
                                {
                                    <span class="badge bg-info">SEN</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">üîµ Saƒü Takƒ±m</h6>
                </div>
                <div class="card-body">
                    @foreach (var player in Model.Players.Where(p => p.Team == "Saƒü"))
                    {
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>@player.Name</span>
                            <div>
                                @if (player.Name == gameState?.ActivePlayer2)
                                {
                                    <span class="badge bg-success">AKTIF</span>
                                }
                                @if (player.Name == currentPlayerName)
                                {
                                    <span class="badge bg-info">SEN</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Spinner -->
<div id="loadingSpinner" class="d-none position-fixed top-50 start-50 translate-middle" style="z-index: 9999;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/GameHub")
            .build();

        let gameUpdateInterval;
        let currentFusePosition = @(gameState?.FusePosition ?? 0);
        let isTimerRunning = @(gameState?.IsTimerRunning.ToString().ToLower() ?? "false");

        connection.start().then(() => {
            connection.invoke("AddToGroup", "@Model.LobbyCode");
            console.log("SignalR baƒülantƒ±sƒ± kuruldu");
            
            // S√ºrekli g√ºncelleme ba≈ülat
            startGameUpdates();
        }).catch(err => console.error("SignalR baƒülantƒ± hatasƒ±:", err));

        connection.on("UpdateGame", function () {
            console.log("Oyun g√ºncellemesi alƒ±ndƒ±, sayfa yenileniyor...");
            location.reload();
        });

        // Sayfa kapatƒ±ldƒ±ƒüƒ±nda gruptan √ßƒ±k
        window.addEventListener("beforeunload", function() {
            connection.invoke("RemoveFromGroup", "@Model.LobbyCode");
            if (gameUpdateInterval) {
                clearInterval(gameUpdateInterval);
            }
        });

        function startGameUpdates() {
            // Her 250ms'de bir oyun durumunu g√ºncelle
            gameUpdateInterval = setInterval(async () => {
                try {
                    const response = await fetch(`/Game/GetGameState?code=@Model.LobbyCode`);
                    const result = await response.json();
                    
                    if (result.success) {
                        updateGameUI(result);
                    }
                } catch (error) {
                    console.error("Oyun durumu g√ºncelleme hatasƒ±:", error);
                }
            }, 250);
        }

        function updateGameUI(gameData) {
            // Fuse pozisyonunu g√ºncelle
            currentFusePosition = gameData.fusePosition;
            updateFusePosition(currentFusePosition);
            
            // Timer durumunu g√ºncelle
            const timerStatus = document.getElementById('timerStatus');
            if (gameData.isTimerRunning) {
                timerStatus.innerHTML = '<span class="badge bg-warning">‚è∞ S√ºre ƒ∞≈üliyor!</span>';
            } else {
                timerStatus.innerHTML = '<span class="badge bg-secondary">‚è∏Ô∏è S√ºre Durdu</span>';
            }
            
            // Skorlarƒ± g√ºncelle
            document.getElementById('team1Score').textContent = gameData.team1Score;
            document.getElementById('team2Score').textContent = gameData.team2Score;
            
            // Sƒ±ra Sende butonunu g√ºncelle
            const passTurnBtn = document.getElementById('passTurnBtn');
            if (passTurnBtn) {
                const currentPlayerName = '@currentPlayerName';
                const isMyTurn = gameData.currentTurn === currentPlayerName;
                
                if (isMyTurn) {
                    passTurnBtn.className = 'btn btn-success btn-lg';
                    passTurnBtn.disabled = false;
                    passTurnBtn.innerHTML = '<i class="fas fa-arrow-right"></i> Sƒ±rayƒ± Ge√ß ve S√ºreyi Ba≈ülat!';
                } else {
                    passTurnBtn.className = 'btn btn-secondary btn-lg';
                    passTurnBtn.disabled = true;
                    passTurnBtn.innerHTML = '<i class="fas fa-clock"></i> Sƒ±ra Rakipte';
                }
            }
            
            // Oyun bittiƒüinde
            if (!gameData.isGameActive && gameData.winner) {
                // Oyun sonu mesajƒ±nƒ± g√∂ster
                const gameStatus = document.getElementById('gameStatus');
                
                if (gameData.isGameCompleted) {
                    // Oyun tamamen bitti (5 puana ula≈üƒ±ldƒ±)
                    gameStatus.innerHTML = `<span class="badge bg-success fs-6">üèÜ ${gameData.gameWinner == "Sol" ? "üî¥ Sol Takƒ±m" : "üîµ Saƒü Takƒ±m"} Oyunu Kazandƒ±!</span>`;
                } else {
                    // Sadece round bitti
                    gameStatus.innerHTML = `<span class="badge bg-warning fs-6">${gameData.winner == "Sol" ? "üî¥ Sol Takƒ±m" : "üîµ Saƒü Takƒ±m"} Round'u Kazandƒ±!</span>`;
                }
                
                // Interval'ƒ± durdur
                if (gameUpdateInterval) {
                    clearInterval(gameUpdateInterval);
                }
                
                // Sayfayƒ± yenile (oyun sonu ekranƒ± i√ßin)
                setTimeout(() => {
                    location.reload();
                }, 2000);
            }
        }

        function updateFusePosition(position) {
            const movingPoint = document.getElementById('movingPoint');
            // Position -100 ile 100 arasƒ±, bunu 0-100% arasƒ± √ßevir
            const percentage = ((position + 100) / 200) * 100;
            movingPoint.style.left = percentage + '%';
            
            // Yumu≈üak ge√ßi≈ü i√ßin CSS transition
            movingPoint.style.transition = 'left 0.2s ease-out';
            
            // Renk deƒüi≈üimi
            if (position < -80) {
                movingPoint.style.color = '#dc3545'; // Kƒ±rmƒ±zƒ±
            } else if (position > 80) {
                movingPoint.style.color = '#0d6efd'; // Mavi
            } else {
                movingPoint.style.color = '#ffc107'; // Sarƒ±
            }
        }

        // Pass Turn fonksiyonu
        async function passTurn() {
            const btn = document.getElementById('passTurnBtn');
            const spinner = document.getElementById('loadingSpinner');
            
            try {
                // Butonu devre dƒ±≈üƒ± bƒ±rak ve loading g√∂ster
                btn.disabled = true;
                btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒ∞≈üleniyor...';
                spinner.classList.remove('d-none');
                
                const response = await fetch('/Game/PassTurn', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: 'code=@Model.LobbyCode'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    console.log("Sƒ±ra ba≈üarƒ±yla ge√ßildi ve s√ºre ba≈ülatƒ±ldƒ±");
                    // SignalR ile g√ºncelleme gelecek, sayfa yenilenecek
                } else {
                    console.error("Sƒ±ra ge√ßirme hatasƒ±:", result.message);
                    alert("Hata: " + result.message);
                    
                    // Butonu tekrar aktif et
                    btn.disabled = false;
                    btn.innerHTML = '<i class="fas fa-arrow-right"></i> Sƒ±rayƒ± Ge√ß ve S√ºreyi Ba≈ülat!';
                }
            } catch (error) {
                console.error("Fetch hatasƒ±:", error);
                
                // Butonu tekrar aktif et
                btn.disabled = false;
                btn.innerHTML = '<i class="fas fa-arrow-right"></i> Sƒ±rayƒ± Ge√ß ve S√ºreyi Ba≈ülat!';
            } finally {
                spinner.classList.add('d-none');
            }
        }

        function volunteerForTeam(team) {
            fetch('/Game/VolunteerForTeam', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    code: '@Model.LobbyCode',
                    team: team
                })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    alert(data.message || 'Bir hata olu≈ütu');
                }
            })
            .catch(error => {
                console.error('G√∂n√ºll√º olma hatasƒ±:', error);
                alert('Bir hata olu≈ütu');
            });
        }

        // Sayfa y√ºklendiƒüinde pozisyonu ayarla
        document.addEventListener('DOMContentLoaded', function() {
            updateFusePosition(currentFusePosition);
            
            // Round ba≈ülangƒ±√ß mesajƒ±nƒ± 5 saniye sonra otomatik gizle
            const roundStartAlert = document.querySelector('.alert-info');
            if (roundStartAlert) {
                setTimeout(() => {
                    roundStartAlert.classList.remove('show');
                    setTimeout(() => {
                        roundStartAlert.remove();
                    }, 150);
                }, 5000);
            }
        });

        function copyLobbyCode() {
            const lobbyCode = document.getElementById('lobbyCode');
            const codeText = lobbyCode.textContent;
            
            // Modern Clipboard API kullan (destekleniyorsa)
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(codeText).then(() => {
                    showCopyFeedback();
                }).catch(() => {
                    // Fallback to old method
                    fallbackCopy();
                });
            } else {
                // Fallback method for older browsers
                fallbackCopy();
            }
        }
        
        function fallbackCopy() {
            const lobbyCode = document.getElementById('lobbyCode');
            const tempInput = document.createElement('input');
            tempInput.value = lobbyCode.textContent;
            tempInput.style.position = 'absolute';
            tempInput.style.left = '-9999px';
            document.body.appendChild(tempInput);
            tempInput.select();
            tempInput.setSelectionRange(0, 99999); // For mobile devices
            document.execCommand('copy');
            document.body.removeChild(tempInput);
            showCopyFeedback();
        }
        
        function showCopyFeedback() {
            const lobbyCode = document.getElementById('lobbyCode');
            const originalText = lobbyCode.textContent;
            const originalClass = lobbyCode.className;
            
            // Visual feedback
            lobbyCode.textContent = '‚úì Kopyalandƒ±!';
            lobbyCode.className = 'text-success';
            lobbyCode.style.fontWeight = 'bold';
            
            // 2 saniye sonra geri al
            setTimeout(() => {
                lobbyCode.textContent = originalText;
                lobbyCode.className = originalClass;
                lobbyCode.style.fontWeight = 'normal';
            }, 2000);
        }
    </script>
}