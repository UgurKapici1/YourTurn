@inject YourTurn.Web.Services.GameService _gameService
@model YourTurn.Web.Controllers.GameController.GameViewModel

@{
    ViewData["Title"] = "Oyun - " + Model.Lobby.LobbyCode;
    var currentPlayerName = ViewBag.CurrentPlayerName?.ToString();
    var gameState = Model.Lobby.GameState;
    var isMyTurn = gameState?.CurrentTurn == currentPlayerName;
    var isActivePlayer = currentPlayerName == gameState?.ActivePlayer1 || currentPlayerName == gameState?.ActivePlayer2;
    var currentPlayer = Model.Lobby.Players.FirstOrDefault(p => p.Name == currentPlayerName);
    var currentPlayerTeam = currentPlayer?.Team ?? "";
}

@Html.AntiForgeryToken()

<div class="container-fluid mt-3">
    <!-- Üst Bilgi Paneli -->
    <div class="row">
        <div class="col-12">
            <div class="card bg-dark text-white mb-3">
                <div class="card-body text-center">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <div></div> <!-- Spacing -->
                        <h4>@Model.Lobby.Category - Lobi: <span id="lobbyCode" class="text-warning" style="cursor: pointer; user-select: all;" onclick="copyLobbyCode()" title="Kopyalamak için tıklayın">@Model.Lobby.LobbyCode</span></h4>
                        @if (Model.Lobby.HostPlayerName == currentPlayerName)
                        {
                            <button class="btn btn-warning btn-sm" onclick="resetGame()" title="Oyunu sıfırla ve lobiye dön">
                                <i class="fas fa-undo"></i> Oyunu Sıfırla
                            </button>
                        }
                    </div>
                    <div class="row">
                        <div class="col-4 text-start">
                            <h5 class="text-danger">🔴 Kırmızı Takım: <span id="team1Score">@gameState?.Team1Score</span></h5>
                            <div id="team1Active">
                                    <small>Aktif: @gameState?.ActivePlayer1</small>
                            </div>
                        </div>
                        <div class="col-4 text-center">
                            <div id="gameStatus">
                                @if (gameState?.IsGameActive == true)
                                {
                                    <span class="badge bg-success fs-6">Oyun Devam Ediyor</span>
                                }
                                else if (!string.IsNullOrEmpty(gameState?.Winner))
                                {
                                    <span class="badge bg-warning fs-6">
                                        @(gameState.Winner == "Sol" ? "🔴 Kırmızı Takım" : "🔵 Mavi Takım") Kazandı!
                                    </span>
                                }
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <h5 class="text-primary">🔵 Mavi Takım: <span id="team2Score">@gameState?.Team2Score</span></h5>
                            <div id="team2Active">
                                    <small>Aktif: @gameState?.ActivePlayer2</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Süre Çubuğu -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header text-center">
                    <h5>⏱️ Süre Çubuğu</h5>
                </div>
                <div class="card-body">
                    <div class="position-relative" style="height: 40px;">
                        <div class="bg-dark" style="height: 20px; width: 100%; position: absolute; top: 10px; border-radius: 10px; border: 2px solid #fff;"></div>
                        <div class="bg-danger" style="height: 20px; width: 10%; position: absolute; top: 10px; left: 0; border-radius: 10px 0 0 10px;"></div>
                        <div class="bg-primary" style="height: 20px; width: 10%; position: absolute; top: 10px; right: 0; border-radius: 0 10px 10px 0;"></div>
                        <div class="position-absolute" style="left: 50%; top: 5px; transform: translateX(-50%); width: 2px; height: 30px; background: #fff;"></div>
                        <div id="movingPoint" class="position-absolute" style="top: 0px; transform: translateX(-50%); font-size: 25px; transition: left 0.1s ease;">
                            ⚡
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Soru Bölümü -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header text-center">
                    <h5>Soru</h5>
                </div>
                <div class="card-body text-center">
                    <h4 class="text-primary">@(gameState?.CurrentQuestion?.Text ?? "Oyun henüz başlamadı")</h4>
                    
                    @if (Model.Lobby.RefereeName == currentPlayerName && gameState?.CurrentQuestion != null)
                    {
                        var correctAnswer = gameState.CurrentQuestion.Answers.FirstOrDefault(a => a.IsCorrect)?.Text;
                        <div class="alert alert-info mt-3"><strong>Doğru Cevap:</strong> @correctAnswer</div>

                        <div id="validation-buttons" class="mt-2">
                            <button id="validate-sol" class="btn btn-outline-danger" onclick="validateAnswer('Sol')" 
                                @(gameState.IsTeam1VolunteerAnswerValidated ? "disabled" : "")>
                                🔴 Kırmızı Takım @(gameState.IsTeam1VolunteerAnswerValidated ? "Doğrulandı" : "Doğrula")
                            </button>
                            <button id="validate-sag" class="btn btn-outline-primary" onclick="validateAnswer('Sağ')"
                                @(gameState.IsTeam2VolunteerAnswerValidated ? "disabled" : "")>
                                🔵 Mavi Takım @(gameState.IsTeam2VolunteerAnswerValidated ? "Doğrulandı" : "Doğrula")
                            </button>
                        </div>
                    }
                    
                    <div id="turnInfo">
                        @if (gameState?.IsGameActive == true)
                        {
                            <div class="mt-3">
                                <p class="text-muted">
                                    Sıra: <strong class="@(gameState.CurrentTurn == gameState.ActivePlayer1 ? "text-danger" : "text-primary")">
                                        @gameState.CurrentTurn
                                    </strong>
                                </p>
                                <div id="timerStatus" class="mt-2">
                                    @if (gameState.IsTimerRunning)
                                    {
                                        <span class="badge bg-warning">⏰ Süre İşliyor!</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">⏸️ Süre Durdu</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Kontrol Butonları -->
        @if (gameState?.IsGameActive == true && isActivePlayer)
        {
            <div class="row mb-4">
                <div class="col-12 text-center">
                    <button id="passTurnBtn" class="btn btn-lg @(isMyTurn ? "btn-success" : "btn-secondary")" 
                            onclick="passTurn()" 
                            @(isMyTurn ? "" : "disabled")>
                        <i class="fas @(isMyTurn ? "fa-arrow-right" : "fa-clock")"></i> 
                    @(isMyTurn ? "Cevapla!" : "Sıra Rakipte")
                    </button>
                </div>
            </div>
        }

    <!-- Oyun Sonu -->
        @if (gameState?.IsGameActive == false && !string.IsNullOrEmpty(gameState.Winner))
        {
            <div class="row mb-4">
                <div class="col-12 text-center">
                    @{
                    var isGameCompleted = _gameService.HasWinningTeam(gameState.Team1Score, gameState.Team2Score);
                    var gameWinner = _gameService.GetWinningTeam(gameState.Team1Score, gameState.Team2Score);
                    }
                    
                    @if (isGameCompleted)
                    {
                        <div class="alert alert-success">
                            <h4>🏆 Oyun Bitti!</h4>
                        <p><strong>@(gameWinner == "Sol" ? "🔴 Kırmızı Takım" : "🔵 Mavi Takım")</strong> oyunu kazandı!</p>
                        </div>
                    @if (Model.Lobby.HostPlayerName == currentPlayerName)
                        {
                        <button class="btn btn-primary btn-lg" onclick="resetGame()">
                            <i class="fas fa-home"></i> Herkesi Lobiye Döndür
                                </button>
                    }
                    else
                    {
                        <p class="text-muted">Host'un herkesi lobiye döndürmesi bekleniyor...</p>
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <h4>🎉 Round Bitti!</h4>
                        <p><strong>@(gameState.Winner == "Sol" ? "🔴 Kırmızı Takım" : "🔵 Mavi Takım")</strong> bu round'u kazandı!</p>
                        </div>
                        
                    @if (Model.Lobby.HostPlayerName == currentPlayerName)
                        {
                            <div class="card mt-3">
                                <div class="card-body">
                                <form method="post" action="/Game/StartNewRound" class="row g-3 justify-content-center align-items-center">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="code" value="@Model.Lobby.LobbyCode" />
                                    <div class="col-md-6">
                                        <label for="categorySelect" class="form-label">Yeni Round için Kategori Değiştir (İsteğe Bağlı)</label>
                                        <select class="form-select" name="newCategoryName" id="categorySelect">
                                            <option value="">Mevcut Kategoriyi Koru (@Model.Lobby.Category)</option>
                                            @foreach (var category in Model.Categories)
                                            {
                                                <option value="@category.Name">@category.Name</option>
                                            }
                                            </select>
                                        </div>
                                    <div class="col-md-4 mt-auto">
                                    <button type="submit" class="btn btn-primary btn-lg">
                                        <i class="fas fa-redo"></i> Yeni Round Başlat
                                    </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    }
                }
                </div>
            </div>
        }

    <!-- Oyuncu Listeleri -->
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card border-danger">
                <div class="card-header bg-danger text-white">
                    <h6 class="mb-0">🔴 Kırmızı Takım</h6>
                </div>
                <ul class="list-group list-group-flush" id="team1Players">
                    @foreach (var player in Model.Lobby.Players.Where(p => p.Team == "Sol"))
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @player.Name
                            <div>
                                @if (player.Name == gameState?.ActivePlayer1)
                                {
                                    <span class="badge bg-success">AKTİF</span>
                                }
                                @if (player.Name == currentPlayerName)
                                {
                                    <span class="badge bg-info">SEN</span>
                                }
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">🔵 Mavi Takım</h6>
                </div>
                <ul class="list-group list-group-flush" id="team2Players">
                    @foreach (var player in Model.Lobby.Players.Where(p => p.Team == "Sağ"))
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @player.Name
                            <div>
                                @if (player.Name == gameState?.ActivePlayer2)
                                {
                                    <span class="badge bg-success">AKTİF</span>
                                }
                                @if (player.Name == currentPlayerName)
                                {
                                    <span class="badge bg-info">SEN</span>
                                }
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        const lobbyCode = "@Model.Lobby.LobbyCode";
        const currentPlayerName = "@currentPlayerName";
        const isReferee = "@(Model.Lobby.RefereeName == currentPlayerName)";
        const requestVerificationToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Check if the page was reloaded due to round end to prevent loops
        const roundOverReloaded = sessionStorage.getItem('roundOverReloaded');
        if (roundOverReloaded) {
            sessionStorage.removeItem('roundOverReloaded');
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/GameHub")
            .build();

        let gameUpdateInterval;

        // SignalR Event Listeners
        connection.on("UpdateGame", () => fetchAndUpdateUI());
        connection.on("NewRoundStarted", () => {
            sessionStorage.removeItem('roundOverReloaded'); // Clear flag before new round
            location.reload();
        });
        connection.on("GameReset", () => {
            alert("Host oyunu sıfırladı. Lobiye dönülüyor...");
            window.location.href = `/Lobby/LobbyRoom?code=${lobbyCode}`;
        });

        // Fetch and UI Update Logic
        async function fetchAndUpdateUI() {
            try {
                const response = await fetch(`/Game/GetGameState?code=${lobbyCode}`);
                if (!response.ok) throw new Error('Network response was not ok');
                
                const state = await response.json();
                if (state.success) {
                    updateUI(state);
                } else {
                    if (gameUpdateInterval) clearInterval(gameUpdateInterval);
                    window.location.href = `/Lobby/LobbyRoom?code=${lobbyCode}`;
                }
            } catch (error) {
                console.error("Error fetching game state:", error);
                if (gameUpdateInterval) clearInterval(gameUpdateInterval);
            }
        }

        function updateUI(state) {
            // Update scores
            document.getElementById('team1Score').textContent = state.team1Score;
            document.getElementById('team2Score').textContent = state.team2Score;
            
            // Update player lists
            const team1Players = document.getElementById('team1Players');
            const team2Players = document.getElementById('team2Players');
            team1Players.innerHTML = '';
            team2Players.innerHTML = '';

            state.players.forEach(player => {
                let badges = '';
                if (player.name === state.activePlayer1 || player.name === state.activePlayer2) {
                    badges += '<span class="badge bg-success">AKTİF</span> ';
                }
                if (player.name === currentPlayerName) {
                    badges += '<span class="badge bg-info">SEN</span>';
                }

                const playerEl = `<li class="list-group-item d-flex justify-content-between align-items-center">${player.name} <div>${badges}</div></li>`;

                if (player.team === 'Sol') {
                    team1Players.innerHTML += playerEl;
                } else if (player.team === 'Sağ') {
                    team2Players.innerHTML += playerEl;
                }
            });

            // Update active players display (this might be redundant now but good for fallback)
            document.getElementById('team1Active').innerHTML = `<small>Aktif: ${state.activePlayer1 || 'N/A'}</small>`;
            document.getElementById('team2Active').innerHTML = `<small>Aktif: ${state.activePlayer2 || 'N/A'}</small>`;
            
            // Update fuse position
            const movingPoint = document.getElementById('movingPoint');
            const percentage = ((state.fusePosition + 100) / 200) * 100;
            movingPoint.style.left = percentage + '%';

            // Update pass button
            const passTurnBtn = document.getElementById('passTurnBtn');
            if (passTurnBtn) {
                const isMyTurn = state.currentTurn === currentPlayerName;
                passTurnBtn.disabled = !isMyTurn;
                passTurnBtn.innerHTML = isMyTurn 
                    ? '<i class="fas fa-arrow-right"></i> Cevapla!' 
                    : '<i class="fas fa-clock"></i> Sıra Rakipte';
                passTurnBtn.className = isMyTurn ? 'btn btn-lg btn-success' : 'btn btn-lg btn-secondary';
            }

            // Update timer status
             const timerStatus = document.getElementById('timerStatus');
             if(timerStatus){
                timerStatus.innerHTML = state.isTimerRunning
                    ? '<span class="badge bg-warning">⏰ Süre İşliyor!</span>'
                    : '<span class="badge bg-secondary">⏸️ Süre Durdu</span>';
            }
            
            // Update validation buttons for referee
            if (isReferee.toLowerCase() === 'true') {
                const validateSolBtn = document.getElementById('validate-sol');
                const validateSagBtn = document.getElementById('validate-sag');
                if (validateSolBtn && validateSagBtn) {
                    validateSolBtn.disabled = state.isTeam1VolunteerAnswerValidated;
                    validateSolBtn.innerHTML = state.isTeam1VolunteerAnswerValidated ? '🔴 Kırmızı Takım Doğrulandı' : '🔴 Kırmızı Takım Doğrula';
                    
                    validateSagBtn.disabled = state.isTeam2VolunteerAnswerValidated;
                    validateSagBtn.innerHTML = state.isTeam2VolunteerAnswerValidated ? '🔵 Mavi Takım Doğrulandı' : '🔵 Mavi Takım Doğrula';
                }
            }
                
            // If game/round is over, stop polling and reload ONCE to show the final screen.
            if (!state.isGameActive && !roundOverReloaded) {
                if (gameUpdateInterval) clearInterval(gameUpdateInterval);
                sessionStorage.setItem('roundOverReloaded', 'true');
                setTimeout(() => location.reload(), 1500);
            }
        }

        // Action Functions
        function validateAnswer(team) {
            fetch('/Game/ValidateAnswer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': requestVerificationToken },
                body: `code=${lobbyCode}&team=${team}`
            }).catch(err => {
                console.error(err);
                alert("Doğrulama sırasında bir hata oluştu.");
            });
        }

        function passTurn() {
            const btn = document.getElementById('passTurnBtn');
                btn.disabled = true;
                btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> İşleniyor...';

            fetch('/Game/PassTurn', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': requestVerificationToken },
                body: `code=${lobbyCode}`
            })
            .then(res => res.json())
            .then(data => {
                if (!data.success) {
                    location.reload();
                }
            }).catch(err => {
                console.error(err);
                alert("Bir ağ hatası oluştu.");
                location.reload();
            });
        }

        function resetGame() {
            if (confirm('Oyunu sıfırlayıp lobiye dönmek istediğinizden emin misiniz?')) {
                fetch('/Game/ResetGame', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': requestVerificationToken },
                    body: `code=${lobbyCode}`
                })
                .then(res => res.json())
                .then(data => {
                    if (!data.success) alert(data.message || 'Bir hata oluştu.');
                }).catch(err => console.error(err));
            }
        }

        // Initialization
        connection.start()
            .then(() => {
                console.log("SignalR Connected to GameHub.");
                connection.invoke("AddToGroup", lobbyCode);
                if (!roundOverReloaded) {
                    fetchAndUpdateUI();
                    gameUpdateInterval = setInterval(fetchAndUpdateUI, 250);
                    }
                })
            .catch(err => console.error("SignalR Connection Error: ", err));
            
        window.addEventListener('beforeunload', () => {
            if (gameUpdateInterval) clearInterval(gameUpdateInterval);
        });

        function copyLobbyCode() {
            navigator.clipboard.writeText(lobbyCode).then(() => {
                const el = document.getElementById('lobbyCode');
                const originalText = el.innerText;
                el.innerText = 'Kopyalandı!';
                setTimeout(() => { el.innerText = originalText; }, 2000);
            });
        }
    </script>
}